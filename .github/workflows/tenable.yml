name: Fetch and Save Tenable Scan Results

on:
#  schedule:
#    - cron: "0 0 * * *" # Runs daily at midnight
   workflow_dispatch: # Allows manual triggering of the workflow


jobs:
  fetch_save_scans:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          path: ${{ steps.vars.outputs.cache_path }}
          token: ${{ secrets.ops_github_token || secrets.GITHUB_TOKEN }}
          lfs: ${{ inputs.lfs }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Prepare Environment
        id: prep
        run: /bin/bash .github/scripts/prep.sh
        continue-on-error: false

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytenable

      - name: Fetch and save Tenable scan results
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          CORP_TENABLE_ACCESS_KEY: ${{ secrets.CORP_TENABLE_ACCESS_KEY }}
          CORP_TENABLE_SECRET_KEY: ${{ secrets.CORP_TENABLE_SECRET_KEY }}
        run: |
          cat << 'EOF' > script.py
          import os
          import csv
          from datetime import datetime
          from tenable.io import TenableIO

          workspace = os.getenv('GITHUB_WORKSPACE', '/tmp')
          current_year = datetime.utcnow().strftime('%Y')
          current_date = datetime.utcnow().strftime('%Y-%m-%d')

          CORP_TENABLE_ACCESS_KEY = os.getenv('CORP_TENABLE_ACCESS_KEY')
          CORP_TENABLE_SECRET_KEY = os.getenv('CORP_TENABLE_SECRET_KEY')

          # Directory to save CSV files
          OUTPUT_DIR = os.path.join(workspace, f"evidence-artifacts/{current_year}/private-sector/Tenable")
          os.makedirs(OUTPUT_DIR, exist_ok=True)

          # Initialize Tenable.io API
          tio = TenableIO(CORP_TENABLE_ACCESS_KEY, CORP_TENABLE_SECRET_KEY)

          def fetch_scan_results():
              try:
                  # The scans list method provides a comprehensive set of data for each scan
                  scans = tio.scans.list()
                  return scans
              except Exception as e:
                  print(f"Failed to fetch scan results: {str(e)}")
                  return []

          def save_to_csv(scans):
              if not scans:
                  return
              file_name = f"{current_date}-tenable-scans.csv"
              file_path = os.path.join(OUTPUT_DIR, file_name)
              keys = scans[0].keys()  # Assumes all scans will have the same set of keys
              with open(file_path, mode='w', newline='') as file:
                  writer = csv.DictWriter(file, fieldnames=keys)
                  writer.writeheader()
                  for scan in scans:
                      writer.writerow(scan)
              print(f"Scan results saved to {file_path}")

          def main():
              print("Fetching Tenable scan results...")
              scans = fetch_scan_results()
              if scans:
                  save_to_csv(scans)

          if __name__ == "__main__":
              main()
          EOF
          python script.py


      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        

      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.ops_github_token || secrets.GITHUB_TOKEN }}
        run: |
          git add .
          git commit -m "Automated commit by GitHub Actions"
          git push https://x-access-token:${{ secrets.ops_github_token }}@github.com/${{ github.repository }}.git main

